// Generated by CoffeeScript 1.9.3
var DoubleChain, Iterator, Packet, Series, SortMap, exports, generatorRulers, groupBy, st, through;

through = require('through');

SortMap = require('sortset').SortMap;

Iterator = require('sortset').Iterator;

st = require("stream-total");

DoubleChain = (function() {
  function DoubleChain(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }

  DoubleChain.prototype.head = function() {
    if (this.isHead()) {
      return this;
    } else {
      return this.left.head();
    }
  };

  DoubleChain.prototype.tail = function() {
    if (this.isTail()) {
      return this;
    } else {
      return this.right.tail();
    }
  };

  DoubleChain.prototype.orderNumber = function() {
    if (this.isHead()) {
      return 1;
    } else {
      return 1 + this.previous().orderNumber();
    }
  };

  DoubleChain.prototype.previous = function() {
    return this.left;
  };

  DoubleChain.prototype.next = function() {
    return this.right;
  };

  DoubleChain.prototype.isHead = function() {
    return this.left === null;
  };

  DoubleChain.prototype.isTail = function() {
    return this.right === null;
  };

  DoubleChain.prototype.forEach = function() {};

  DoubleChain.prototype.insert = function(item) {};

  DoubleChain.prototype.remove = function(item) {};

  DoubleChain.prototype.addHead = function() {
    var ret;
    ret = new DoubleChain;
    ret.right = this.head();
    ret.left = null;
    this.head().left = ret;
    return ret;
  };

  DoubleChain.prototype.addTail = function() {
    var ret;
    ret = new DoubleChain;
    ret.left = this.tail();
    ret.right = null;
    this.tail().right = ret;
    return ret;
  };

  return DoubleChain;

})();

DoubleChain.factory = function(array) {};

Packet = (function() {
  function Packet(rulers1) {
    this.rulers = rulers1;
    this.series = new Series;
  }

  Packet.prototype.stream = function(template) {};

  Packet.prototype.readArray = function(array) {
    return this.readIterator(new Iterator(array));
  };

  Packet.prototype.readIterator = function(iterator) {
    return Iterator.forEach(iterator, function(doc) {
      var d_series, pre_series;
      d_series = this.rulers.exec(doc);
      d_series.reverse();
      pre_series = null;
      return Iterator.forEach(d_series, function(data) {
        var series;
        series = {
          left: null,
          right: null,
          key: data.key,
          value: data.value,
          details: [],
          top: function() {
            if (this.left !== null) {
              return this;
            } else {
              return this.left.top();
            }
          },
          tail: function() {
            if (this.right !== null) {
              return this;
            } else {
              return this.right.tail();
            }
          }
        };
        if (pre_series == null) {
          series.details.push(doc);
        }
        if (pre_series != null) {
          series.right = pre_series;
          pre_series.left = series;
        }
        return pre_series = series;
      });
    });
  };

  return Packet;

})();

Series = (function() {
  function Series() {
    this.data = new SortMap;
    this.docs = [];
  }

  Series.prototype.total = function(template) {};

  Series.prototype.forEach = function(callback) {};

  return Series;

})();

generatorRulers = function(option) {
  var field, i, index, len, ruler, rulers;
  rulers = {
    items: new SortMap,
    exec: function(doc) {
      var ret;
      ret = [];
      this.items.forEach(function(key, ruler) {
        return ret.push({
          name: key,
          value: ruler.exec(doc)
        });
      });
      return ret;
    },
    add: function(ruler) {
      return this.items.add(ruler.name, ruler);
    }
  };
  if (!option instanceof Array) {
    option = option.split(',');
  }
  for (index = i = 0, len = option.length; i < len; index = ++i) {
    field = option[index];
    ruler = {
      name: field,
      exec: function(doc) {
        return doc[this.name];
      }
    };
    if ('function' === typeof field) {
      ruler = {
        name: "Series " + index,
        exec: field
      };
    }
    rulers.add(ruler);
  }
  return rulers;
};

exports = module.exports = groupBy = function(option) {
  var rulers;
  rulers = generatorRulers(option);
  return new Packet(rulers);
};

//# sourceMappingURL=groupby.js.map
